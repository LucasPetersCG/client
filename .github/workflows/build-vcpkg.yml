name: Build with vcpkg

on:
  push:
    branches:
      - master
      - v*
    tags:
      - v*

  pull_request:
    branches:
      - master
      - v*

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}
    runs-on: ${{ matrix.os }}-${{ matrix.os-version }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        name: [windows-msvc]
        buildtype: [Debug, Release]
        luajit: [on]
        include:
          - name: windows-msvc
            os: windows
            os-version: latest
            cxx: cl.exe
            cc: cl.exe
            triplet: x64-windows
            packages: >
              boost-iostreams boost-asio boost-system boost-variant boost-lockfree boost-filesystem boost-uuid boost-thread
              glew luajit libogg libvorbis openal-soft opengl openssl physfs zlib

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Get latest CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: '3.25.0'

      - name: Set Environment vars
        run: |
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
          echo "VCPKG_FORCE_SYSTEM_BINARIES=1" >> $GITHUB_ENV

      - name: Cache vcpkg
        uses: actions/cache@v4
        id: vcpkg-cache
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/vcpkg
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-
          enableCrossOsArchive: true
          fail-on-cache-miss: false
          lookup-only: false

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v7
        continue-on-error: true
        with:
          vcpkgArguments: ${{ matrix.packages }}
          vcpkgDirectory: ${{ github.workspace }}/vcpkg/
          vcpkgTriplet: ${{ matrix.triplet }}
          vcpkgGitCommitId: 6f7ffeb18f99796233b958aaaf14ec7bd4fb64b2

      - name: Debug vcpkg output
        if: failure()
        shell: pwsh
        run: |
          Write-Host "Listing vcpkg directory contents:"
          Get-ChildItem -Path "${{ github.workspace }}/vcpkg" -Force
          Write-Host "Checking vcpkg logs:"
          Get-ChildItem -Path "${{ github.workspace }}/vcpkg/buildtrees" -Recurse -Filter "install-*.log" | ForEach-Object { Write-Host "=== $($_.FullName) ==="; Get-Content $_.FullName }

      - name: Cache build
        uses: actions/cache@v4
        id: build-cache
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/build
          key: build-${{ runner.os }}-${{ matrix.buildtype }}-${{ matrix.luajit }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            build-${{ runner.os }}-${{ matrix.buildtype }}-${{ matrix.luajit }}-
          enableCrossOsArchive: true
          fail-on-cache-miss: false
          lookup-only: false

      - name: Create build directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/build"
          Write-Host "Created build directory"

      - name: Run CMake manually
        shell: pwsh
        run: |
          $env:CMAKE_BUILD_TYPE = "${{ matrix.buildtype }}"
          $env:LUAJIT = "${{ matrix.luajit }}"
          
          $vcpkgRoot = "${{ github.workspace }}/vcpkg"
          $vcpkgInstalled = "$vcpkgRoot/installed/${{ matrix.triplet }}"
          $boostDir = "$vcpkgInstalled/share/boost"
          
          Write-Host "Running CMake with verbose output..."
          & "C:/Program Files/CMake/bin/cmake.exe" -G Ninja `
            -DCMAKE_BUILD_TYPE="${{ matrix.buildtype }}" `
            -DLUAJIT="${{ matrix.luajit }}" `
            -DCMAKE_MINIMUM_REQUIRED_VERSION=3.25.0 `
            -DCMAKE_TOOLCHAIN_FILE="$vcpkgRoot/scripts/buildsystems/vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET="${{ matrix.triplet }}" `
            -DCMAKE_VERBOSE_MAKEFILE=ON `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
            -DCMAKE_PREFIX_PATH="$vcpkgInstalled" `
            -DCMAKE_MODULE_PATH="$boostDir" `
            -DBoost_DIR="$boostDir" `
            -DBoost_USE_STATIC_LIBS=ON `
            -DBoost_USE_MULTITHREADED=ON `
            -DBoost_USE_STATIC_RUNTIME=OFF `
            -DBoost_DEBUG=ON `
            -DBoost_COMPILER="-vc143" `
            -DBoost_ARCHITECTURE="-x64" `
            -DBoost_THREADAPI="win32" `
            -DCMAKE_POLICY_DEFAULT_CMP0167=NEW `
            -DCMAKE_POLICY_DEFAULT_CMP0148=NEW `
            -DCMAKE_POLICY_DEFAULT_CMP0145=NEW `
            -B "${{ github.workspace }}/build" `
            -S "${{ github.workspace }}" `
            2>&1 | Tee-Object -FilePath "${{ github.workspace }}/build/cmake_output.log"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "CMake failed with exit code $LASTEXITCODE"
            Get-Content "${{ github.workspace }}/build/cmake_output.log"
            exit 1
          }

      - name: Debug build output
        if: failure()
        shell: pwsh
        run: |
          Write-Host "Listing build directory contents:"
          Get-ChildItem -Path "${{ github.workspace }}/build" -Force -Recurse
          Write-Host "Checking CMake logs:"
          Get-ChildItem -Path "${{ github.workspace }}/build" -Recurse -Filter "*.log" | ForEach-Object { Write-Host "=== $($_.FullName) ==="; Get-Content $_.FullName }

      - name: Upload artifact binary (exe)
        uses: actions/upload-artifact@v4
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ github.workspace }}/build/otclient.exe

      - name: Upload artifact binary (dlls)
        uses: actions/upload-artifact@v4
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ github.workspace }}/build/*.dll
