name: Build with vcpkg

on:
  push:
    branches:
      - master
      - v*
    tags:
      - v*

  pull_request:
    branches:
      - master
      - v*

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}
    runs-on: ${{ matrix.os }}-${{ matrix.os-version }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        name: [windows-msvc]
        buildtype: [Debug, Release]
        luajit: [on]
        include:
          - name: windows-msvc
            os: windows
            os-version: latest
            cxx: cl.exe
            cc: cl.exe
            triplet: x64-windows
            packages: >
              boost-iostreams boost-asio boost-system boost-variant boost-lockfree boost-filesystem boost-uuid boost-thread
              glew luajit libogg libvorbis openal-soft opengl openssl physfs zlib

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Get latest CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: '3.25.0'

      - name: Set Environment vars
        run: |
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
          echo "VCPKG_FORCE_SYSTEM_BINARIES=1" >> $GITHUB_ENV
          echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_INSTALLED=${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}" >> $GITHUB_ENV
          echo "BOOST_DIR=${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/share/boost" >> $GITHUB_ENV

      - name: Clone vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          git checkout 6f7ffeb18f99796233b958aaaf14ec7bd4fb64b2
          ./bootstrap-vcpkg.bat

      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vcpkg
          key: vcpkg-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ matrix.triplet }}-
          enableCrossOsArchive: true
          fail-on-cache-miss: false
          lookup-only: false

      - name: Cache vcpkg installed
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vcpkg_installed
          key: vcpkg-installed-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            vcpkg-installed-${{ runner.os }}-${{ matrix.triplet }}-
          enableCrossOsArchive: true
          fail-on-cache-miss: false
          lookup-only: false

      - name: Install dependencies
        shell: pwsh
        run: |
          & "${{ github.workspace }}/vcpkg/vcpkg.exe" install --triplet=${{ matrix.triplet }} `
            boost-system `
            boost-thread `
            boost-filesystem `
            boost-iostreams `
            boost-asio `
            boost-variant `
            boost-lockfree `
            glew `
            physfs `
            openal-soft `
            libogg `
            libvorbis `
            zlib `
            opengl `
            lua `
            luajit

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v7
        continue-on-error: true
        with:
          vcpkgArguments: ${{ matrix.packages }}
          vcpkgDirectory: ${{ github.workspace }}/vcpkg/
          vcpkgTriplet: ${{ matrix.triplet }}
          vcpkgGitCommitId: 6f7ffeb18f99796233b958aaaf14ec7bd4fb64b2

      - name: Debug vcpkg output
        if: failure()
        shell: pwsh
        run: |
          Write-Host "Listing vcpkg directory contents:"
          if (Test-Path "${{ github.workspace }}/vcpkg") {
            Get-ChildItem -Path "${{ github.workspace }}/vcpkg" -Force
          } else {
            Write-Host "vcpkg directory does not exist"
          }
          Write-Host "Checking vcpkg logs:"
          if (Test-Path "${{ github.workspace }}/vcpkg/buildtrees") {
            Get-ChildItem -Path "${{ github.workspace }}/vcpkg/buildtrees" -Recurse -Filter "install-*.log" | ForEach-Object { Write-Host "=== $($_.FullName) ==="; Get-Content $_.FullName }
          } else {
            Write-Host "vcpkg buildtrees directory does not exist"
          }

      - name: Cache build
        uses: actions/cache@v4
        id: build-cache
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/build
          key: build-${{ runner.os }}-${{ matrix.buildtype }}-${{ matrix.luajit }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            build-${{ runner.os }}-${{ matrix.buildtype }}-${{ matrix.luajit }}-
          enableCrossOsArchive: true
          fail-on-cache-miss: false
          lookup-only: false

      - name: Create build directory
        run: mkdir -p build

      - name: Run CMake
        run: |
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE="${{ matrix.buildtype }}" \
            -DLUAJIT="${{ matrix.luajit }}" \
            -DCMAKE_MINIMUM_REQUIRED_VERSION=3.1 \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="${{ matrix.triplet }}" \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_PREFIX_PATH="$VCPKG_INSTALLED" \
            -DCMAKE_MODULE_PATH="$BOOST_DIR" \
            -DBoost_DIR="$BOOST_DIR" \
            -DBoost_USE_STATIC_LIBS=ON \
            -DBoost_USE_MULTITHREADED=ON \
            -DBoost_USE_STATIC_RUNTIME=OFF \
            -DBoost_DEBUG=ON \
            -DBoost_COMPILER="-vc143" \
            -DBoost_ARCHITECTURE="-x64" \
            -DBoost_THREADAPI="win32" \
            -DCMAKE_POLICY_DEFAULT_CMP0167=NEW \
            -DCMAKE_POLICY_DEFAULT_CMP0148=NEW \
            -DCMAKE_POLICY_DEFAULT_CMP0145=NEW \
            -DCMAKE_POLICY_DEFAULT_CMP0135=NEW \
            -DFRAMEWORK_SOUND=ON \
            -DFRAMEWORK_GRAPHICS=ON \
            -DFRAMEWORK_XML=ON \
            -DFRAMEWORK_NET=ON \
            -DFRAMEWORK_SQL=OFF \
            -B build \
            -S . \
            2>&1 | tee build/cmake_output.log

      - name: Debug build output
        if: failure()
        shell: pwsh
        run: |
          Write-Host "Listing build directory contents:"
          if (Test-Path "build") {
            Get-ChildItem -Path "build" -Force
          } else {
            Write-Host "build directory does not exist"
          }
          Write-Host "Checking CMake logs:"
          if (Test-Path "build") {
            Get-ChildItem -Path "build" -Recurse -Filter "*.log" | ForEach-Object { Write-Host "=== $($_.FullName) ==="; Get-Content $_.FullName }
          } else {
            Write-Host "No build directory found"
          }

      - name: Upload artifact binary (exe)
        uses: actions/upload-artifact@v4
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: build/otclient.exe

      - name: Upload artifact binary (dlls)
        uses: actions/upload-artifact@v4
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: build/*.dll
